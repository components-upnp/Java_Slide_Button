/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.irit.main;

import com.irit.main.State;
import com.irit.upnp.DefilementService;
import com.irit.xml.GenerateurXml;
import org.fourthline.cling.model.meta.LocalService;
import org.fourthline.cling.model.types.UDN;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import java.util.HashMap;

/**
 *
 * @author IDA
 */
public class DefilementFrame extends javax.swing.JFrame {

    
    private LocalService<DefilementService> defilementService;
    private String udn;
    private GenerateurXml gen = new GenerateurXml();
    /**
     * Creates new form DefilementFrame
     */
    public DefilementFrame(LocalService<DefilementService> d, UDN u) {
        initComponents();
        this.defilementService = d;
        udn = u.toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gauche = new javax.swing.JButton();
        droite = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gauche.setText("<");
        gauche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    gaucheActionPerformed(evt);
                } catch (TransformerException e) {
                    e.printStackTrace();
                } catch (ParserConfigurationException e) {
                    e.printStackTrace();
                }
            }
        });

        droite.setText(">");
        droite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    droiteActionPerformed(evt);
                } catch (TransformerException e) {
                    e.printStackTrace();
                } catch (ParserConfigurationException e) {
                    e.printStackTrace();
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(gauche, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addComponent(droite, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gauche, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(droite, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(123, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gaucheActionPerformed(java.awt.event.ActionEvent evt) throws TransformerException, ParserConfigurationException {//GEN-FIRST:event_gaucheActionPerformed
        HashMap<String,String> args = new HashMap<String, String>();
        args.put("UDN",udn);
        args.put("COMMANDE", "GAUCHE");
        this.defilementService.getManager().getImplementation().setTarget(gen.getDocXml(args));
        this.defilementService.getManager().getImplementation().setTarget("");
    }//GEN-LAST:event_gaucheActionPerformed

    private void droiteActionPerformed(java.awt.event.ActionEvent evt) throws TransformerException, ParserConfigurationException {//GEN-FIRST:event_droiteActionPerformed
        HashMap<String,String> args = new HashMap<String, String>();
        args.put("UDN",udn);
        args.put("COMMANDE", "DROITE");
        this.defilementService.getManager().getImplementation().setTarget(gen.getDocXml(args));
        this.defilementService.getManager().getImplementation().setTarget("");}//GEN-LAST:event_droiteActionPerformed

   
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton droite;
    private javax.swing.JButton gauche;
    // End of variables declaration//GEN-END:variables
}
